Create an Item class from which objects can be instantiated to represent different items. The information to store is the name and weight of the item (kg).

Add the following methods to the class:

Constructor that takes the name and the weight of the item as parameters
Method public String getName(), which returns the item's name
Method public int getWeight(), which returns the item's weight
Method public String toString(), which returns the string "name (weight kg)"

Create a Suitcase class. The suitcase has items and a maximum weight that determines the maximum total weight of the items.

Add the following methods to the class:

Constructor, to which the maximum weight is provided
The method public void addItem(Item item), which adds the item passed as a parameter to the suitcase. The method does not return a value.
The method public String toString(), which returns the string "x items (y kg)"

Add the following methods to the Suitcase class:

a printItems method, which prints all the items in the suitcase
a totalWeight method, which returns the total weight of the items

Add to the Suitcase class a heaviestItem method, which returns the largest item based on weight. 
If several items share the heaviest weight, the method can return any one of them. 
The method should return an object reference. If the suitcase is empty, return the value null.
Make a Hold class with the following methods:

a constructor, to which the maximum weight is given
method public void addSuitcase(Suitcase suitcase) that adds the specified luggage to the hold
method public String toString() that returns the string "x suitcases (y kg)"
Store your suitcases in a suitable ArrayList structure.

The class Hold has to ensure that the total weight of the suitcases it contains does not exceed the maximum weight. 
Should the maximum weight be exceeded due to the addition of new luggage, the addSuitcase method should not add the new suitcase.



public class Item {
    private String name;
    private int weight;
    
    public Item (String name, int weight){
        this.name = name;
        this.weight = weight;
    }
    public String getName(){
        return this.name;
    }
    public int getWeight(){
        return this.weight;
    }
    public String toString(){
        return this.name+" ("+this.weight+" kg)";
    }
    
}


import java.util.ArrayList;

public class Suitcase {
    private int weightLimit;
    private ArrayList<Item> items;

    public Suitcase(int weightLimit) {
        this.weightLimit = weightLimit;
        this.items = new ArrayList<>();
    }

    public void addItem(Item newItem) {
        int totalWeight = this.totalWeight();

        if (totalWeight + newItem.getWeight() <= weightLimit) {
            this.items.add(newItem);
        }
    }

    public String toString() {
        if (this.items.isEmpty()) {
            return "no items (0 kg)";
        }

        else if (this.items.size() == 1) {
            return "1 item (" + this.items.get(0).getWeight() + "kg)";
        }

        else if (this.items.size() > 1) {
            int totalWeight = this.totalWeight();

            return this.items.size() + " items (" + totalWeight + "kg)";
        } else {
            return null;
        }
    }

    public int totalWeight() {
        int totalWeight = 0;

        for (Item item : items) {
            totalWeight += item.getWeight();
        }

        return totalWeight;
    }

    public void printItems() {
        String returnString = "";
        for (Item item : this.items) {
            returnString = item.getName() + " (" + item.getWeight() + " kg)";
            System.out.println(returnString);
        }
    }

    public Item heaviestItem() {
        if (this.items.isEmpty()) {
            return null;
        }

        Item returnItem = this.items.get(0);

        for (Item item : items) {
            if (returnItem.getWeight() < item.getWeight()) {
                returnItem = item;
            }
        }

        return returnItem;
    }
}
import java.util.ArrayList;
public class Hold {
    private int maxWeight;
    private ArrayList<Suitcase> suitcase;
    
    public Hold (maxWeight){
        this.maxWeight = maxWeight; 
        this.suitcase = new ArrayList<>();
    }


public void addSuitcase(Suitcase suitcase){
    int weight = this.currentWeight();
        if (weight + suitcase.totalWeight() <= this.weightLimit) {
            this.suitcases.add(suitcase);
        }
    }
public int currentWeight() {
        int weight = 0;
        for (Suitcase suitcase : this.suitcases) {
            weight += suitcase.totalWeight();
        }
        return weight;
    }
public String toString() {
        int weight = this.currentWeight();
        return this.suitcases.size() + " suitcases (" + weight + " kg)";
    }

    public void printItems() {
        for (Suitcase suitcase : this.suitcases) {
            suitcase.printItems();
        }
    }
}


